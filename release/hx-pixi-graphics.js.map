{
"version":3,
"file":"hx-pixi-graphics.js",
"sourceRoot":"file://",
"sources":["/haxe/haxe-pixi-demos/src/pixihx/demos/graphics/Main.hx","/usr/lib/haxe/std/Math.hx"],
"sourcesContent":["package pixihx.demos.graphics;\n\nimport pixi.Pixi;\nimport pixi.display.MovieClip;\nimport pixi.display.Stage;\nimport pixi.primitives.Graphics;\nimport pixi.utils.Detector;\nimport pixi.loaders.AssetLoader;\nimport pixi.display.DisplayObjectContainer;\nimport js.Browser;\n\nclass Main {\n\n    private var _renderer:Dynamic;\n    private var _stage:Stage;\n\n    private var _graphics:Graphics;\n    private var _thing:Graphics;\n    private var _count:Float;\n\n\tpublic function new() {\n\t\t_stage = new Stage(0x00FF00);\n        _stage.interactive = true;\n        _renderer = Detector.autoDetectRenderer(620, 380);\n        _renderer.view.style.display = \"block\";\n        Browser.document.body.appendChild(_renderer.view);\n\n        _graphics = new Graphics();\n\n        // set a fill and line style\n        _graphics.beginFill(0xFF3300);\n        _graphics.lineStyle(10, 0xffd900, 1);\n        \n        // draw a shape\n        _graphics.moveTo(50,50);\n        _graphics.lineTo(250, 50);\n        _graphics.lineTo(100, 100);\n        _graphics.lineTo(250, 220);\n        _graphics.lineTo(50, 220);\n        _graphics.lineTo(50, 50);\n        _graphics.endFill();\n        \n        // set a fill and line style again\n        _graphics.lineStyle(10, 0xFF0000, 0.8);\n        _graphics.beginFill(0xFF700B, 1);\n        \n        // draw a second shape\n        _graphics.moveTo(210,300);\n        _graphics.lineTo(450,320);\n        _graphics.lineTo(570,350);\n        _graphics.lineTo(580,20);\n        _graphics.lineTo(330,120);\n        _graphics.lineTo(410,200);\n        _graphics.lineTo(210,300);\n        _graphics.endFill();\n        \n        // draw a rectangel\n        _graphics.lineStyle(2, 0x0000FF, 1);\n        _graphics.drawRect(50, 250, 100, 100);\n        \n        // draw a circle\n        _graphics.lineStyle(0);\n        _graphics.beginFill(0xFFFF0B, 0.5);\n        _graphics.drawCircle(470, 200,100);\n        \n        _graphics.lineStyle(20, 0x33FF00);\n        _graphics.moveTo(30,30);\n        _graphics.lineTo(600, 300);\n            \n        _stage.addChild(_graphics);\n\n        // lets create moving shape\n        _thing = new Graphics();\n        _stage.addChild(_thing);\n        _thing.position.x = 620/2;\n        _thing.position.y = 380/2;\n        \n        _count = 0;\n\n        _stage.click = _stage.tap = _onStageClick;\n        \n        Browser.window.requestAnimationFrame(cast animate);\n\t}\n\n    private function _onStageClick():Void {\n        _graphics.lineStyle(Math.random() * 30, Math.random() * 0xFFFFFF, 1);\n        _graphics.moveTo(Math.random() * 620,Math.random() * 380);\n        _graphics.lineTo(Math.random() * 620,Math.random() * 380);\n    }\n\n\tprivate function animate():Void {\n        Browser.window.requestAnimationFrame(cast animate);\n\n        _thing.clear();\n        \n        _count += 0.1;\n        \n        _thing.clear();\n        _thing.lineStyle(30, 0xff0000, 1);\n        _thing.beginFill(0xffFF00, 0.5);\n        \n        _thing.moveTo(-120 + Math.sin(_count) * 20, -100 + Math.cos(_count)* 20);\n        _thing.lineTo(120 + Math.cos(_count) * 20, -100 + Math.sin(_count)* 20);\n        _thing.lineTo(120 + Math.sin(_count) * 20, 100 + Math.cos(_count)* 20);\n        _thing.lineTo(-120 + Math.cos(_count)* 20, 100 + Math.sin(_count)* 20);\n        _thing.lineTo(-120 + Math.sin(_count) * 20, -100 + Math.cos(_count)* 20);\n        \n        _thing.rotation = _count * 0.1;\n\n        _renderer.render(_stage);\n    }\n\n\tprivate static function main() {\n\t\tnew Main();\n\t}\n}","/*\n * Copyright (C)2005-2012 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n\tThis class defines mathematical functions and constants.\n**/\n#if cpp @:include(\"hxMath\") #end\nextern class Math\n{\n\t/**\n\t\tRepresents the ratio of the circumference of a circle to its diameter, \n\t\tspecified by the constant, Ï€. `PI` is approximately 3.141592653589793.\n\t**/\n\tstatic var PI(default,null) : Float;\n\n\t/**\n\t\tA special Float constant which denotes negative infinity.\n\n\t\tFor example, this is the result of -1.0 / 0.0.\n\n\t\tOperations with NEGATIVE_INFINITY as an operand may result in\n\t\tNEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. \n\n\t\tIf this constant is converted to an Int, e.g. through Std.int(), the\n\t\tresult is unspecified.\n\t**/\n\tstatic var NEGATIVE_INFINITY(default, null) : Float;\n\n\t/**\n\t\tA special Float constant which denotes negative infinity.\n\n\t\tFor example, this is the result of 1.0 / 0.0.\n\n\t\tOperations with POSITIVE_INFINITY as an operand may result in\n\t\tNEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. \n\n\t\tIf this constant is converted to an Int, e.g. through Std.int(), the\n\t\tresult is unspecified.\n\t**/\n\tstatic var POSITIVE_INFINITY(default,null) : Float;\n\n\t/**\n\t\tA special Float constant which denotes an invalid number.\n\n\t\tNaN stands for \"Not a Number\". It occurs when a mathematically incorrect\n\t\toperation is executed, such as taking the square root of a negative\n\t\tnumber: Math.sqrt(-1).\n\n\t\tAll further operations with NaN as an operand will result in NaN.\n\n\t\tIf this constant is converted to an Int, e.g. through Std.int(), the\n\t\tresult is unspecified.\n\n\t\tIn order to test if a value is NaN, you should use Math.isNaN() function.\n\n\t\t@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected\n\t\tresults when performing arithmetic operations with NaN on Windows, \n\t\tsee [https://bugs.php.net/bug.php?id=42143]\n\t**/\n\tstatic var NaN(default, null) : Float;\n\n\t/**\n\t\tReturns the absolute value of `v`.\n\n\t\tIf `v` is positive or 0, the result is unchanged. Otherwise the result \n\t\tis -`v`.\n\t\t\n\t\tIf `v` is NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is \n\t\tPOSITIVE_INFINITY.\n\t\t\n\t\tIf `v` is NaN, the result is NaN.\n\t**/\n\tstatic function abs(v:Float):Float;\n\n\t/**\n\t\tReturns the smaller of values `a` and `b`.\n\n\t\tIf `a` or `b` are NaN, the result is NaN.\n\t\tIf `a` or `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.\n\t\tIf `a` and `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.\n\t**/\n\tstatic function min(a:Float, b:Float):Float;\n\n\t/**\n\t\tReturns the greater of values `a` and `b`.\n\n\t\tIf `a` or `b` are NaN, the result is NaN.\n\t\tIf `a` or `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.\n\t\tIf `a` and `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.\n\t**/\n\tstatic function max(a:Float, b:Float):Float;\n\n\t/**\n\t\tReturns the trigonometric sine of the specified angle `v`, in radians.\n\t\t\n\t\tIf `v` is NaN or infinite, the result is NaN.\n\t**/\n\tstatic function sin(v:Float):Float;\n\n\t/**\n\t\tReturns the trigonometric cosine of the specified angle `v`, in radians.\n\t\t\n\t\tIf `v` is NaN or infinite, the result is NaN.\n\t**/\n\tstatic function cos(v:Float):Float;\n\n\t/**\n\t\tReturns the trigonometric tangent of the specified angle `v`, in radians.\n\t\t\n\t\tIf `v` is NaN or infinite, the result is NaN.\n\t**/\n\tstatic function tan(v:Float):Float;\n\n\t/**\n\t\tReturns the trigonometric arc of the specified angle `v`, in radians.\n\t\t\n\t\tIf `v` is NaN or infinite, the result is NaN.\n\t**/\n\tstatic function asin(v:Float):Float;\n\n\t/**\n\t\tReturns the trigonometric arc cosine of the specified angle `v`, \n\t\tin radians.\n\t\t\n\t\tIf `v` is NaN or infinite, the result is NaN.\n\t**/\n\tstatic function acos(v:Float):Float;\n\n\t/**\n\t\tReturns the trigonometric arc tangent of the specified angle `v`, \n\t\tin radians.\n\t\t\n\t\tIf `v` is NaN or infinite, the result is NaN.\n\t**/\n\tstatic function atan(v:Float):Float;\n\n\t/**\n\t\tReturns the trigonometric arc tangent whose tangent is the quotient of \n\t\ttwo specified numbers, in radians.\n\t\t\n\t\tIf parameter `x` or `y`  is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, \n\t\tthe result is NaN.\n\t**/\n\tstatic function atan2(y:Float, x:Float):Float;\n\n\t/**\n\t\tReturns Euler's number, raised to the power of `v`.\n\t\t\n\t\texp(1.0) is approximately 2.718281828459.\n\t\t\n\t\tIf `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.\n\t\tIf `v` is NEGATIVE_INFINITY, the result is 0.0.\n\t\tIf `v` is NaN, the result is NaN.\n\t**/\n\tstatic function exp(v:Float):Float;\n\n\t/**\n\t\tReturns the natural logarithm of `v`.\n\t\t\n\t\tThis is the mathematical inverse operation of exp, \n\t\ti.e. `log(exp(v)) == v` always holds.\n\t\t\n\t\tIf `v` is negative (including NEGATIVE_INFINITY) or NaN, the result \n\t\tis NaN.\n\t\tIf `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.\n\t\tIf `v` is 0.0, the result is NEGATIVE_INFINITY.\n\t**/\n\tstatic function log(v:Float):Float;\n\n\t/**\n\t\tReturns a specified base `v` raised to the specified power `exp`.\n\t**/\n\tstatic function pow(v:Float, exp:Float):Float;\n\n\t/**\n\t\tReturns the square root of `v`.\n\t\t\n\t\tIf `v` is negative (including NEGATIVE_INFINITY) or NaN, the result \n\t\tis NaN.\n\t\tIf `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.\n\t\tIf `v` is 0.0, the result is 0.0.\n\t**/\n\tstatic function sqrt(v:Float):Float;\n\n\t/**\n\t\tRounds `v` to the nearest integer value.\n\t\t\n\t\tIf `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY \n\t\tor POSITIVE_INFINITY, the result is unspecified.\n\t**/\n\tstatic function round(v:Float):Int;\n\n\t/**\n\t\tReturns the largest integer value that is not greater than `v`.\n\n\t\tIf `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY \n\t\tor POSITIVE_INFINITY, the result is unspecified.\n\t**/\n\tstatic function floor(v:Float):Int;\n\n\t/**\n\t\tReturns the smallest integer value that is not less than `v`.\n\n\t\tIf `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY \n\t\tor POSITIVE_INFINITY, the result is unspecified.\n\t**/\n\tstatic function ceil(v:Float):Int;\n\n\t/**\n\t\tReturns a pseudo-random number which is greater than or equal to 0.0, \n\t\tand less than 1.0.\n\t**/\n\tstatic function random() : Float;\n\n\t#if ((flash9 && !as3) || cpp)\n\t/**\n\t\tReturns the largest integer value that is not greater than `v`, as a Float.\n\n\t\tIf `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, \n\t\tthe result is unspecified.\n\t**/\n\tstatic function ffloor( v : Float ) : Float;\n\n\t/**\n\t\tReturns the smallest integer value that is not less than `v`, as a Float.\n\n\t\tIf `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, \n\t\tthe result is unspecified.\n\t**/\n\tstatic function fceil( v : Float ) : Float;\n\n\t/**\n\t\tRounds `v` to the nearest integer value, as a Float.\n\n\t\tIf `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, \n\t\tthe result is unspecified.\n\t**/\n\tstatic function fround( v : Float ) : Float;\n\n\t#else\n\n\tstatic inline function ffloor( v : Float ) : Float {\n\t\treturn floor(v);\n\t}\n\n\tstatic inline function fceil( v : Float ) : Float {\n\t\treturn ceil(v);\n\t}\n\n\tstatic inline function fround( v : Float ) : Float {\n\t\treturn round(v);\n\t}\n\n\t#end\n\n\n\t/**\n\t\tTells if `f` is a finite number.\n\n\t\tIf `f` is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN, the result \n\t\tis false, otherwise the result is true.\n\t**/\n\tstatic function isFinite( f : Float ) : Bool;\n\n\t/**\n\t\tTells if `f` is not a valid number.\n\n\t\tIf `f` is NaN, the result is true, otherwise the result is false. \n\t\tIn particular, both POSITIVE_INFINITY and NEGATIVE_INFINITY are\n\t\tnot considered NaN.\n\t**/\n\tstatic function isNaN( f : Float ) : Bool;\n\n\tprivate static function __init__() : Void untyped {\n\t#if flash9\n\t\tNaN = __global__[\"Number\"].NaN;\n\t\tNEGATIVE_INFINITY = __global__[\"Number\"].NEGATIVE_INFINITY;\n\t\tPOSITIVE_INFINITY = __global__[\"Number\"].POSITIVE_INFINITY;\n\t#else\n\t\t#if !js // genjs.ml will insert this only if necessary.\n\t\t\tMath.__name__ = [\"Math\"];\n\t\t#end\n\t\tMath.NaN = Number[\"NaN\"];\n\t\tMath.NEGATIVE_INFINITY = Number[\"NEGATIVE_INFINITY\"];\n\t\tMath.POSITIVE_INFINITY = Number[\"POSITIVE_INFINITY\"];\n\t#end\n\t#if js\n\t\t__feature__(\"Type.resolveClass\",$hxClasses['Math'] = Math);\n\t#end\n\t\tMath.isFinite = function(i) {\n\t\t\treturn\n\t\t\t#if flash9\n\t\t\t__global__[\"isFinite\"](i);\n\t\t\t#elseif flash\n\t\t\t_global[\"isFinite\"](i);\n\t\t\t#elseif js\n\t\t\t__js__(\"isFinite\")(i);\n\t\t\t#else\n\t\t\tfalse;\n\t\t\t#end\n\t\t};\n\t\tMath.isNaN = function(i) {\n\t\t\treturn\n\t\t\t#if flash9\n\t\t\t__global__[\"isNaN\"](i);\n\t\t\t#elseif flash\n\t\t\t_global[\"isNaN\"](i);\n\t\t\t#elseif js\n\t\t\t__js__(\"isNaN\")(i);\n\t\t\t#else\n\t\t\tfalse;\n\t\t\t#end\n\t\t};\n\t}\n\n}\n\n\n"],
"names":[],
"mappings":";;;;6BAoBO,lBAAe;CACrB,EAAS,YAAU;CACb,EAAqB;CACrB,EAAY,FAA4B,AAAK;CAC7C,EAA+B;CAC/B,AAAkC;CAElC,EAAY;CAGZ,AAAoB;CACpB,AAAoB,AAAI,AAAU;CAGlC,AAAiB,AAAG;CACpB,AAAiB,AAAK;CACtB,AAAiB,AAAK;CACtB,AAAiB,AAAK;CACtB,AAAiB,AAAI;CACrB,AAAiB,AAAI;CACrB;CAGA,AAAoB,AAAI,AAAU;CAClC,AAAoB,AAAU;CAG9B,AAAiB,AAAI;CACrB,AAAiB,AAAI;CACrB,AAAiB,AAAI;CACrB,AAAiB,AAAI;CACrB,AAAiB,AAAI;CACrB,AAAiB,AAAI;CACrB,AAAiB,AAAI;CACrB;CAGA,AAAoB,AAAG,AAAU;CACjC,AAAmB,AAAI,AAAK,AAAK;CAGjC,AAAoB;CACpB,AAAoB,AAAU;CAC9B,AAAqB,AAAK,AAAI;CAE9B,AAAoB,AAAI;CACxB,AAAiB,AAAG;CACpB,AAAiB,AAAK;CAEtB,AAAgB;CAGhB,EAAS;CACT,AAAgB;CAChB,EAAoB;CACpB,EAAoB;CAEpB,EAAS;CAET,EAAe,AAAa;CAE5B,AAAqC,AAAK;;kCA+BlC,vBACd;;;;eA7BU,JAA8B;EAClC,DAAoB,EAAgB,FAAI,EAAgB,FAAU;EAClE,DAAiB,EAAgB,FAAI,EAAgB;EACrD,DAAiB,EAAgB,FAAI,EAAgB;;SAGpD,EAAwB;EACzB,DAAqC,AAAK;EAE1C;EAEA,EAAU;EAEV;EACA,DAAiB,AAAI,AAAU;EAC/B,DAAiB,AAAU;EAE3B,DAAc,EAAO,FAAS,EAAU,FAAI,EAAO,FAAS,EAAS;EACrE,DAAc,EAAM,FAAS,EAAU,FAAI,EAAO,FAAS,EAAS;EACpE,DAAc,EAAM,FAAS,EAAU,FAAI,EAAM,FAAS,EAAS;EACnE,DAAc,EAAO,FAAS,EAAS,FAAI,EAAM,FAAS,EAAS;EACnE,DAAc,EAAO,FAAS,EAAU,FAAI,EAAO,FAAS,EAAS;EAErE,CAAkB,AAAS;EAE3B,DAAiB;;;;;AC+LvB,GAAW;AACX,GAAyB;AACzB,GAAyB;AAKzB,GAAgB,SACf;CAMA,AAAmB;;AAKpB,GAAa,UACZ;CAMA,AAAgB;;;;;"
}